generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts    Account[]
  sessions    Session[]
  Jot         Jot[]
  JotTemplate JotTemplate[]
  Label       Label[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Jot {
  id        String   @id @default(cuid())
  authorId  String
  title     String
  content   Json?
  status    String   @default("Draft")
  priority  String?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  author User               @relation(fields: [authorId], references: [id])
  labels LabelAssociation[]

  @@index([authorId])
  @@map(name: "jots")
}

model JotTemplate {
  id          String   @id @default(cuid())
  authorId    String
  title       String
  content     Json?
  isPublished Boolean  @default(false) @map(name: "is_published")
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")

  author User               @relation(fields: [authorId], references: [id])
  labels LabelAssociation[]

  @@index([authorId])
  @@map(name: "jot_templates")
}

model Label {
  id        String   @id @default(cuid())
  authorId  String
  name      String
  color     String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  author       User               @relation(fields: [authorId], references: [id])
  associations LabelAssociation[]

  @@index([authorId])
  @@map(name: "labels")
}

model LabelAssociation {
  id            String   @id @default(cuid())
  authorId      String
  labelId       String
  jotId         String?
  jotTemplateId String?
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @default(now()) @map(name: "updated_at")

  label       Label        @relation(fields: [labelId], references: [id])
  jot         Jot?         @relation(fields: [jotId], references: [id])
  jotTemplate JotTemplate? @relation(fields: [jotTemplateId], references: [id])

  @@index([authorId])
  @@index([labelId])
  @@index([jotId])
  @@index([jotTemplateId])
  @@map(name: "label_associations")
}
