generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id                String          @id @default(cuid())
  activeWorkspaceId String?
  name              String?
  email             String?         @unique
  emailVerified     DateTime?
  image             String?
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @default(now()) @map("updated_at")
  accounts          Account[]
  JotTemplate       JotTemplate[]
  Jot               Jot[]
  Label             Label[]
  sessions          Session[]
  activeWorkspace   Workspace?      @relation("activeWorkspace", fields: [activeWorkspaceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  workspaceUsers    WorkspaceUser[]
  workspaceOwners   Workspace[]     @relation("workspaceOwner")

  @@index([activeWorkspaceId])
  @@map("users")
}

model Workspace {
  id             String          @id @default(cuid())
  name           String
  ownerId        String
  default        Boolean         @default(false)
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @default(now()) @map("updated_at")
  JotTemplate    JotTemplate[]
  Jot            Jot[]
  Label          Label[]
  activeUsers    User[]          @relation("activeWorkspace")
  workspaceUsers WorkspaceUser[]
  owner          User            @relation("workspaceOwner", fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([ownerId])
  @@map("workspaces")
}

model WorkspaceUser {
  id                String    @id @default(cuid())
  userId            String
  workspaceId       String
  hasAcceptedInvite Boolean   @default(false)
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @default(now()) @map("updated_at")
  user              User      @relation(fields: [userId], references: [id])
  workspace         Workspace @relation(fields: [workspaceId], references: [id])

  @@index([userId])
  @@index([workspaceId])
  @@map("workspace_user")
}

model Jot {
  id          String             @id @default(cuid())
  authorId    String
  workspaceId String
  title       String
  content     Json?
  status      String             @default("Draft")
  priority    String?
  published   Boolean            @default(false)
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @default(now()) @map("updated_at")
  author      User               @relation(fields: [authorId], references: [id])
  workspace   Workspace          @relation(fields: [workspaceId], references: [id])
  labels      LabelAssociation[]

  @@index([authorId])
  @@index([workspaceId])
  @@map("jots")
}

model JotTemplate {
  id          String             @id @default(cuid())
  authorId    String
  workspaceId String
  title       String
  content     Json?
  isPublished Boolean            @default(false) @map("is_published")
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @default(now()) @map("updated_at")
  author      User               @relation(fields: [authorId], references: [id])
  workspace   Workspace          @relation(fields: [workspaceId], references: [id])
  labels      LabelAssociation[]

  @@index([authorId])
  @@index([workspaceId])
  @@map("jot_templates")
}

model Label {
  id           String             @id @default(cuid())
  authorId     String
  workspaceId  String
  name         String
  color        String
  createdAt    DateTime           @default(now()) @map("created_at")
  updatedAt    DateTime           @default(now()) @map("updated_at")
  associations LabelAssociation[]
  author       User               @relation(fields: [authorId], references: [id])
  workspace    Workspace          @relation(fields: [workspaceId], references: [id])

  @@index([authorId])
  @@index([workspaceId])
  @@map("labels")
}

model LabelAssociation {
  id            String       @id @default(cuid())
  authorId      String
  labelId       String
  jotId         String?
  jotTemplateId String?
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @default(now()) @map("updated_at")
  jot           Jot?         @relation(fields: [jotId], references: [id])
  jotTemplate   JotTemplate? @relation(fields: [jotTemplateId], references: [id])
  label         Label        @relation(fields: [labelId], references: [id])

  @@index([authorId])
  @@index([labelId])
  @@index([jotId])
  @@index([jotTemplateId])
  @@map("label_associations")
}
